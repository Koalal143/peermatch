include:
  - docker-compose.base.yml


services:
  backend:
    build:
      context: ./backend
      args:
        - SERVER__HOST=0.0.0.0
        - SERVER__PORT=8000
    container_name: mpithack-backend
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/src:/app/src
      - ./backend/alembic:/app/alembic
    networks:
      - backend-network
    restart: unless-stopped
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: mpithack-frontend
    ports:
      - "3000:3000"
    env_file:
      - .env
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - backend-network
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api
      - NODE_ENV=development

  caddy:
    image: caddy:latest
    container_name: mpithack-caddy
    ports:
      - "80:80"
    volumes:
      - ./Caddyfile.dev:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - backend-network
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      - CADDY_ADMIN=0.0.0.0:2019

  postgres:
    image: postgres:15
    container_name: mpithack-postgres
    environment:
      POSTGRES_USER: $POSTGRES__USER
      POSTGRES_PASSWORD: $POSTGRES__PASSWORD
      POSTGRES_DB: $POSTGRES__DB
    ports:
      - 5435:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network


volumes:
  postgres_data:
  redis_data:
  caddy_data:
  caddy_config:
